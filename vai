#!/bin/bash

VERSION="1.3.2"

RED="\033[0;31m"
NC="\033[0m"

## Indica se deve remover todo o conteúdo do projeto no servidor
## antes de fazer a nova instalação
CLEAN_INSTALL=0

## Ação principal que será executada
ACTION="help"

## Lista dos arquivos de configuração dos servidores
## que será utilizada para o deploy
SERVERS=

if [ -d "deploy/" ]
then
  SERVERS=$(find "deploy/" -name "*.config" -type f)
fi

## Script que será executado na task RUN
RUN_SCRIPT=

echo "vai (version $VERSION)"
echo

helpMenu() {
  echo "Usage: vai [command] [options...]"
  echo
  echo "Commands:"
  echo "  vai deploy [options...]     Make deploy, keep old files"
  echo "  vai configure               Configure remote host, app path and SSH keygen to remote server"
  echo "  vai run [name] [options...] Run script from /deploy/[name]-script.sh"
  echo "  vai keygen                  Just configure SSH keygen to remote server"
  echo "  vai version                 Show remote commit version"
  echo "  vai help                    This help"
  echo
  echo "Options:"
  echo "  --clean-install, -c         Remove previous files to make clean install"
  echo "  --server, -s                Server files to use. Could be 'file' or '*file'"
}

abort() {
  echo -e "${RED}\nAborted${NC}"
  exit 1
}

loadServerConfig() {
  # shellcheck source=deploy/
  # shellcheck disable=SC1091
  source "$1"

  echo "++++++++++++++++++++++++++++++++++++++++++++++++++"
  echo "+ SERVER: $DEPLOY_HOST:$DEPLOY_PORT"
  echo "+ USER  : $DEPLOY_USER"
  echo "+ PATH  : $DEPLOY_PATH"
  echo "++++++++++++++++++++++++++++++++++++++++++++++++++"
}

configure() {
  echo -n "Name: "
  read -r DEPLOY_NAME

  echo -n "Host: "
  read -r DEPLOY_HOST

  echo -n "Port: "
  read -r DEPLOY_PORT

  echo -n "User: "
  read -r DEPLOY_USER

  echo -n "Path: "
  read -r DEPLOY_PATH

  mkdir -p deploy

  {
    echo "#!/bin/bash"
    echo "export DEPLOY_HOST=${DEPLOY_HOST}"
    echo "export DEPLOY_PORT=${DEPLOY_PORT}"
    echo "export DEPLOY_USER=${DEPLOY_USER}"
    echo "export DEPLOY_PATH=${DEPLOY_PATH}"
  } > "deploy/$DEPLOY_NAME.config"

  # shellcheck disable=SC1091
  source "deploy/deploy.config"

  sshKeyGen

  echo "* Successfully configured server"
}

sshKeyGen() {
  echo "* Starting configuring SSH keygen"

  projectName=$(basename "$(git rev-parse --show-toplevel)")
  projectName="$projectName-${DEPLOY_HOST/./-}"

  ssh-keygen -f "$HOME/.ssh/$projectName" -t rsa -b 2048
  ssh-copy-id -p "$DEPLOY_PORT" "$DEPLOY_USER@$DEPLOY_HOST"

  echo "* Successfully configure SSH keygen"
}

createPackage() {
  echo "* Creating package"
  git archive --format=zip -o deploy/deploy.zip HEAD .
  zip -rv -q deploy/deploy.zip deploy/version
}

getVersion() {
  echo "* Getting commit version"
  git rev-parse HEAD | cat > "deploy/version"
}

sendPackage() {
  echo "* Sending package to remote server"

  ## define um nome temporário para o zip
  PACKAGE_NAME="deploy-$(date +"%s").zip"

  scp -q -P "$DEPLOY_PORT" "deploy/deploy.zip" "$DEPLOY_USER@$DEPLOY_HOST:~/$PACKAGE_NAME"

  POSTSCRIPT=deploy/post-script.sh

  # shellcheck disable=SC2029
  ssh -t -p "$DEPLOY_PORT" "$DEPLOY_USER@$DEPLOY_HOST" "(($CLEAN_INSTALL)) && \
          echo '* Cleaning directory \"$DEPLOY_PATH\" (--clean-install option)' && \
          rm -rf $DEPLOY_PATH/*;\
        echo '* Extracting package' && \
          mkdir -p $DEPLOY_PATH && \
          unzip -q -o ~/$PACKAGE_NAME -d $DEPLOY_PATH && \
          rm ~/$PACKAGE_NAME && \
          cd $DEPLOY_PATH && \
          [ -f $POSTSCRIPT ] && echo '* Running post-script' && chmod +x $POSTSCRIPT && ./$POSTSCRIPT && echo '* Post-script done'"
}

version() {
  echo "* Getting remote app version"
  # shellcheck disable=SC2029
  ssh -p "$DEPLOY_PORT" "$DEPLOY_USER@$DEPLOY_HOST" "echo -n '> '; cat $DEPLOY_PATH/deploy/version"
}

clean() {
  echo "* Removing temporary files"
  rm -rf deploy/{version,deploy.zip}
}

deploy() {
  getVersion
  createPackage
  sendPackage
  clean
  echo "* done!"
}

runScript() {  
  script="$1"

  if [ -f "$script" ]
  then
    scp -q -P "$DEPLOY_PORT" "$script" "$DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH/deploy"
    # shellcheck disable=SC2029
    ssh -t -p "$DEPLOY_PORT" "$DEPLOY_USER@$DEPLOY_HOST" "cd $DEPLOY_PATH &&\
      echo '* Running $script' && chmod +x $script && ./$script && echo '* $script done'"
    echo
  else
    echo "* no $script file found"
  fi
}

confirmAction() {
  echo -n "Confirm? [y/N] "

  read -r action

  if [ "$action" != "y" ]
  then
    echo -e "${RED}\nAborted${NC}"
    exit 1
  fi
}

showServers() {
  echo "* Server config files:"
  for s in $SERVERS
  do
    echo "    > $s"
  done
  echo
}

## faz a leitura dos parâmetros
while [ "$1" != "" ];
do
  case "$1" in
    ## ACTION
    "configure" | "keygen" | "deploy" | "version" | "run" )
      ACTION="$1"

      echo "* Action defined: $ACTION"

      ## Obtém o script que deve ser executado
      if [ "$ACTION" == "run" ]
      then
        shift
        
        RUN_SCRIPT="deploy/$1-script.sh"
        echo "* Script defined: $RUN_SCRIPT"

        if [ ! -f "$RUN_SCRIPT" ]
        then
          echo "    > script not found"
          abort
        fi
      fi
      ;;

    ## CLEAN_INSTALL
    -c | --clean-install )
      CLEAN_INSTALL=1
      echo "* Clean install activated"
      ;;

    ## SERVER
    -s | --server )
      shift
      if [ "$1" != "" ]
      then
        SERVERS=$(find "deploy/" -name "$1.config" -type f)
        echo "* Server config file redefined: $1.config"
      fi
      ;;

    ## help
    "help" )
      helpMenu
      exit 0
      ;;
  esac

  shift
done

if [ ! "$SERVERS" ]
then
  echo "* No server config file found"
  echo -e "${RED}\nAborted${NC}"
  exit 1
fi

case "$ACTION" in
  "configure")
    configure
  ;;

  "keygen")
    for configFile in $SERVERS; do
      loadServerConfig "$configFile"
      sshKeyGen
      echo
    done;
  ;;

  "deploy")
    showServers
    confirmAction
    for configFile in $SERVERS; do
      loadServerConfig "$configFile"
      deploy
      echo
    done;
  ;;

  "run")
    showServers
    confirmAction
    for configFile in $SERVERS; do
      loadServerConfig "$configFile"
      runScript "$RUN_SCRIPT"
      echo
    done;
  ;;

  "version")
    for configFile in $SERVERS; do
      loadServerConfig "$configFile"
      version
      echo
    done;
  ;;

esac
